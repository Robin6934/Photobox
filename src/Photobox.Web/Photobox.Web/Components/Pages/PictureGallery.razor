@page "/"
@using Microsoft.AspNetCore.WebUtilities
@using Photobox.Web.Services
@inject GalleryService GalleryService
@inject ImageService ImageService
@inject NavigationManager Nav
@inject IDialogService DialogService

<PageTitle>PictureGallery</PageTitle>

<h1 class="mb-4">Gallery</h1>

@if (_images.Count > 0)
{
    <MudStack>
        @foreach (var imageName in _images.Keys)
        {
            <MudStack Class="mb-3" Spacing="0">
                <MudImage Class="rounded-1" Src="@_images[imageName]" Alt="Description" Fluid="true"/>

                <MudButton Class="rounded-0" Variant="Variant.Filled" Href="@GetDownloadLink(imageName)" Size="Size.Large" StartIcon="@Icons.Material.Filled.Download" Color="Color.Info">
                    Download
                </MudButton>
            </MudStack>
        }
    </MudStack>
}
else if (_galleryCodeChecked)
{
    <p>No images found.</p>
}

@code {
    private Dictionary<string, string> _images = [];
    private bool _dialogShown = false;
    private bool _galleryCodeChecked = false;

    [Parameter] public string? GalleryCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code))
        {
            GalleryCode = code!;
        }

        // Do not load images yet if no code is set
        if (!string.IsNullOrWhiteSpace(GalleryCode))
        {
            await LoadImages();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrWhiteSpace(GalleryCode) && !_dialogShown)
        {
            _dialogShown = true;
            await AskForGalleryCode();
        }
    }

    private async Task AskForGalleryCode()
    {
        var dialog = await DialogService.ShowAsync<GalleryCodeDialog>("Enter Gallery Code");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string code)
        {
            Nav.NavigateTo($"/?code={code}", forceLoad: true);
        }
    }

    private async Task LoadImages()
    {
        var images = await GalleryService.GetImagesByEventCodeAsync(GalleryCode);
        images.Reverse();

        foreach (var image in images)
        {
            _images[image.ImageName] = await ImageService.GetPreviewImagePreSignedUrl(image.ImageName);
        }

        _galleryCodeChecked = true;
        StateHasChanged();
    }

    private static string GetDownloadLink(string imageName)
        => $"/api/Image/GetImage/{imageName}";

    private static string GetPrintLink(string imageName)
        => $"/api/Image/PrintImage/{imageName}";
}
