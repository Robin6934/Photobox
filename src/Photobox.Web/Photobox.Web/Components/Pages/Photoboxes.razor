@page "/ManagePhotoBoxes"
@using System.Security.Claims
@using Photobox.Web.Models
@using Photobox.Web.Services
@inject PhotoBoxService PhotoboxService
@inject EventService EventService
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudPaper Class="p-6">
    <MudText Typo="Typo.h4" Class="mb-4">Meine Fotoboxen</MudText>

    @if (_photoBoxes == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (!_photoBoxes.Any())
    {
        <MudAlert Severity="Severity.Info">Du hast noch keine Fotoboxen registriert.</MudAlert>
    }
    else
    {            
        <MudExpansionPanels MultiExpansion="true">
            @foreach (var (photoBox, @event) in _photoBoxes)
            {
                <MudExpansionPanel Text="@photoBox.Name">
                    <MudGrid>
                        <MudItem xs="1">
                            <MudAvatar Size="Size.Small" Color="@(true ? Color.Success : Color.Error)"/>
                        </MudItem>
                        <MudItem xs="7">
                            @if (@event is not null)
                            {
                                <MudLink Href="@($"/events/{@event.Id}")" Target="_blank">
                                    Current Event: @(@event.Name)
                                </MudLink>
                            }
                            else
                            {
                                <MudText Color="Color.Secondary">(No Event)</MudText>
                            }
                        </MudItem>
                    </MudGrid>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>

    }
</MudPaper>

@code {
    private Dictionary<PhotoBox, Event?> _photoBoxes = [];
    
    private Guid _userId;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine(user.Identity?.IsAuthenticated);
        
        if (user.Identity?.IsAuthenticated == true)
        {
            _userId = Guid.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? throw new InvalidOperationException());
            
            var photoboxes = await PhotoboxService.GetPhotoboxesFromUserIdAsync(_userId);

            var events = await EventService.GetRunningEventsFromUserId(_userId);

            foreach (var photobox in photoboxes)
            {
                _photoBoxes[photobox] = events.FirstOrDefault(x => x.UsedPhotoBoxId == photobox.Id);
            }
            
            await base.OnInitializedAsync();
        }
    }

    private async Task DeletePhotobox(Guid photoboxId)
    {
        await PhotoboxService.DeletePhotoboxByIdAsync(photoboxId); 
        
        _photoBoxes.Remove(_photoBoxes.Keys.Single(p => p.Id == photoboxId));
    }
}