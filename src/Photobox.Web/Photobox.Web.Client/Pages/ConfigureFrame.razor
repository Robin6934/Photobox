@page "/configureFrame"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using MudBlazor;
@using MudBlazor.Interop
@using Photobox.Web.Client.MouseService
@using Photobox.Web.Client.Pages.Components

@inject IJSRuntime JsRuntime
@inject MouseService mouseService;

<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<h3>Photo Frame Customizer</h3>

@if (string.IsNullOrEmpty(_imagePreview))
{
    <MudPaper Class="border-dashed border-2 mud-border-primary pa-4"
              Style="aspect-ratio: 3 / 2; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; gap: 16px; padding: 20px;">
    
        <MudText Typo="Typo.h6" Class="text-secondary">
            No Image Selected <br />
            Please choose a photo taken with your Photobox camera. Selecting the correct aspect ratio ensures the best display.
        </MudText>

        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept="image/*">
            <ActivatorContent>
                <MudFab Color="Color.Secondary"
                        StartIcon="@Icons.Material.Filled.Image"
                        Label="Load Picture" />
            </ActivatorContent>
        </MudFileUpload>
    </MudPaper>

}
else
{
    <MudPaper Class="border-dashed border-2 mud-border-primary" 
              Style="position: relative; justify-content: center; align-items: center; display: inline-flex; flex-direction: row">
    
        <svg id="svgCanvas" width="@scaledWidth" height="@scaledHeight"
             @onmousemove=@(e => mouseService.FireMove(this, e)) 
                                   @onmouseup=@(e => mouseService.FireUp(this, e))
                                   @onmouseleave=@(e => mouseService.FireLeave(this, e))>
        
            <!-- Background Image (Auto-scaled to fit window) -->
            <image id="myImage" href="@_imagePreview" x="0" y="0" 
                   width="@scaledWidth" height="@scaledHeight"
                   style="pointer-events: none;"/>
        
            <!-- Draggable Objects -->
            @foreach (var imageObject in _imageObjects)
            {
                <Draggable @bind-X=imageObject.X @bind-Y=imageObject.Y>
                    <image href="@imageObject.Content" x="@imageObject.X" y="@imageObject.Y"
                           width="100" height="100" alt=""/>
                </Draggable>
            }
        </svg>

        <MudPaper Class="border-2 mud-border-primary"
                  Style="width: 200px; overflow-y: auto; margin-right: 10px; padding: 10px;">
            <MudText Typo="Typo.h6" Class="text-secondary">Layers</MudText>

            <MudDropContainer T="ImageObject" Items="_imageObjects"
                               Class="mud-elevation-2">
 
                <ItemRenderer>
                    <MudPaper>
                        <MudAvatar Image="@context.Content" Size="Size.Large"/>
                        <MudText>Placeholder</MudText>
                    </MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </MudPaper>

    </MudPaper>


    <MudButton @onclick="AddTextObject" StartIcon="@Icons.Material.Filled.NoteAdd">Add Text</MudButton>
    <MudButton @onclick="AddImageObject" StartIcon="@Icons.Material.Filled.AddPhotoAlternate">Add Image</MudButton>
    
}

@code {
    private string? _imagePreview;
    private readonly List<ImageObject> _imageObjects = [];
    
    private double imageWidth = 800; // Original image width
    private double imageHeight = 600; // Original image height
    private double scaledWidth; // Auto-adjusted width
    private double scaledHeight; // Auto-adjusted height
    
    // 10.5 megaByte
    long _maxFileSize = 10L * 1024L * 1024L;

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file is not null)
        {
            // TODO (11.02.2025) check for too large files and show error message 
            var buffer = new byte[file.Size];
            await file.OpenReadStream(_maxFileSize).ReadAsync(buffer.AsMemory());
            _imagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            
            // Get real image size from the browser
            var dimensions = await JsRuntime.InvokeAsync<BoundingClientRect>("getImageSize", "myImage");
            imageWidth = dimensions.Width;
            imageHeight = dimensions.Height;

            // Scale image to fit window
            await ScaleImageToWindow();
        }
    }
    
    
    private async Task ScaleImageToWindow()
    {
        var windowSize = await JsRuntime.InvokeAsync<BoundingClientRect>("getWindowSize");

        double maxWidth = windowSize.Width * 0.9; // 90% of window width
        double maxHeight = windowSize.Height * 0.9; // 90% of window height

        double aspectRatio = imageWidth / imageHeight;

        if (imageWidth > maxWidth || imageHeight > maxHeight)
        {
            if (maxWidth / aspectRatio <= maxHeight)
            {
                scaledWidth = maxWidth;
                scaledHeight = maxWidth / aspectRatio;
            }
            else
            {
                scaledHeight = maxHeight;
                scaledWidth = maxHeight * aspectRatio;
            }
        }
        else
        {
            scaledWidth = imageWidth;
            scaledHeight = imageHeight;
        }

        StateHasChanged();
    }

    private async Task AddTextObject()
    {
        string content = await JsRuntime.InvokeAsync<string>("renderTextAsPng", "Sample Text", 16, "Black");

        await AddObject(content);
    }

    private async Task AddImageObject()
    {
        await AddObject("https://cdn.pixabay.com/photo/2016/09/24/20/11/dab-1692452_1280.png", 0.1d);
    }

    private async Task AddObject(string content, double scale = 1.0d)
    {
        var result = await JsRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", "myImage");

        _imageObjects.Add(new ImageObject
        {
            Content = content,
            X = 150, // Centered horizontally
            Y = 250, // Centered vertically
            Scale = scale,
        });
    }

    private void UpdateObject(ImageObject obj)
    {
        var index = _imageObjects.FindIndex(x => x == obj);
        if (index != -1)
        {
            _imageObjects[index] = obj;
            StateHasChanged();
        }
    }
}

<script>
    window.MyDOMGetBoundingClientRect = (elementId) => {
        const element = document.getElementById(elementId);
        return element.getBoundingClientRect(); 
    };

    window.getImageSize = (id) => {
        return new Promise((resolve) => {
            const img = new Image();
            img.src = document.getElementById(id).href.baseVal;
            img.onload = () => {
                resolve({ Width: img.width, Height: img.height });
            };
        });
    };

    window.getWindowSize = () => {
        return { Width: window.outerWidth, Height: window.innerHeight };
    };
</script>