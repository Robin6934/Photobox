/*
 * Photobox.LocalServer
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Photobox.LocalServer.RestApi.Model
{
    /// <summary>
    /// TakePictureResultModel
    /// </summary>
    [DataContract(Name = "TakePictureResultModel")]
    public partial class TakePictureResultModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TakePictureResultModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TakePictureResultModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TakePictureResultModel" /> class.
        /// </summary>
        /// <param name="imagePath">imagePath (required).</param>
        public TakePictureResultModel(string imagePath = default(string))
        {
            // to ensure "imagePath" is required (not null)
            if (imagePath == null)
            {
                throw new ArgumentNullException("imagePath is a required property for TakePictureResultModel and cannot be null");
            }
            this.ImagePath = imagePath;
        }

        /// <summary>
        /// Gets or Sets ImagePath
        /// </summary>
        [DataMember(Name = "imagePath", IsRequired = true, EmitDefaultValue = true)]
        public string ImagePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TakePictureResultModel {\n");
            sb.Append("  ImagePath: ").Append(ImagePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
