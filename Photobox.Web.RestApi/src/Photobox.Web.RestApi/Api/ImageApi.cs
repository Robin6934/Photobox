/*
 * Photobox.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Photobox.Web.RestApi.Client;

namespace Photobox.Web.RestApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiImageDeleteImageDelete(string imageName = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiImageDeleteImageDeleteWithHttpInfo(string imageName = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiImageDeleteImagesDelete(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiImageDeleteImagesDeleteWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ApiImageGetImageImageNameGet(string imageName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ApiImageGetImageImageNameGetWithHttpInfo(string imageName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ApiImageGetPreviewImageImageNameGet(string imageName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ApiImageGetPreviewImageImageNameGetWithHttpInfo(string imageName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiImageListImagesGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiImageListImagesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiImageUploadImagePost(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiImageUploadImagePostWithHttpInfo(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiImageDeleteImageDeleteAsync(string imageName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiImageDeleteImageDeleteWithHttpInfoAsync(string imageName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiImageDeleteImagesDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiImageDeleteImagesDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ApiImageGetImageImageNameGetAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ApiImageGetImageImageNameGetWithHttpInfoAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ApiImageGetPreviewImageImageNameGetAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ApiImageGetPreviewImageImageNameGetWithHttpInfoAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiImageListImagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiImageListImagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiImageUploadImagePostAsync(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiImageUploadImagePostWithHttpInfoAsync(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageApi : IImageApiSync, IImageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImageApi : IImageApi
    {
        private Photobox.Web.RestApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageApi(string basePath)
        {
            this.Configuration = Photobox.Web.RestApi.Client.Configuration.MergeConfigurations(
                Photobox.Web.RestApi.Client.GlobalConfiguration.Instance,
                new Photobox.Web.RestApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Photobox.Web.RestApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Photobox.Web.RestApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Photobox.Web.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImageApi(Photobox.Web.RestApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Photobox.Web.RestApi.Client.Configuration.MergeConfigurations(
                Photobox.Web.RestApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Photobox.Web.RestApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Photobox.Web.RestApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Photobox.Web.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ImageApi(Photobox.Web.RestApi.Client.ISynchronousClient client, Photobox.Web.RestApi.Client.IAsynchronousClient asyncClient, Photobox.Web.RestApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Photobox.Web.RestApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Photobox.Web.RestApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Photobox.Web.RestApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Photobox.Web.RestApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Photobox.Web.RestApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiImageDeleteImageDelete(string imageName = default(string), int operationIndex = 0)
        {
            ApiImageDeleteImageDeleteWithHttpInfo(imageName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Photobox.Web.RestApi.Client.ApiResponse<Object> ApiImageDeleteImageDeleteWithHttpInfo(string imageName = default(string), int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (imageName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Photobox.Web.RestApi.Client.ClientUtils.ParameterToMultiMap("", "imageName", imageName));
            }

            localVarRequestOptions.Operation = "ImageApi.ApiImageDeleteImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/Image/DeleteImage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageDeleteImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiImageDeleteImageDeleteAsync(string imageName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiImageDeleteImageDeleteWithHttpInfoAsync(imageName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Photobox.Web.RestApi.Client.ApiResponse<Object>> ApiImageDeleteImageDeleteWithHttpInfoAsync(string imageName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (imageName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Photobox.Web.RestApi.Client.ClientUtils.ParameterToMultiMap("", "imageName", imageName));
            }

            localVarRequestOptions.Operation = "ImageApi.ApiImageDeleteImageDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/Image/DeleteImage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageDeleteImageDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiImageDeleteImagesDelete(int operationIndex = 0)
        {
            ApiImageDeleteImagesDeleteWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Photobox.Web.RestApi.Client.ApiResponse<Object> ApiImageDeleteImagesDeleteWithHttpInfo(int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ImageApi.ApiImageDeleteImagesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/Image/DeleteImages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageDeleteImagesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiImageDeleteImagesDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiImageDeleteImagesDeleteWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Photobox.Web.RestApi.Client.ApiResponse<Object>> ApiImageDeleteImagesDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ImageApi.ApiImageDeleteImagesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/Image/DeleteImages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageDeleteImagesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ApiImageGetImageImageNameGet(string imageName, int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream> localVarResponse = ApiImageGetImageImageNameGetWithHttpInfo(imageName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream> ApiImageGetImageImageNameGetWithHttpInfo(string imageName, int operationIndex = 0)
        {
            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Photobox.Web.RestApi.Client.ApiException(400, "Missing required parameter 'imageName' when calling ImageApi->ApiImageGetImageImageNameGet");
            }

            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageName", Photobox.Web.RestApi.Client.ClientUtils.ParameterToString(imageName)); // path parameter

            localVarRequestOptions.Operation = "ImageApi.ApiImageGetImageImageNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/Image/GetImage/{imageName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageGetImageImageNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ApiImageGetImageImageNameGetAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await ApiImageGetImageImageNameGetWithHttpInfoAsync(imageName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream>> ApiImageGetImageImageNameGetWithHttpInfoAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Photobox.Web.RestApi.Client.ApiException(400, "Missing required parameter 'imageName' when calling ImageApi->ApiImageGetImageImageNameGet");
            }


            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageName", Photobox.Web.RestApi.Client.ClientUtils.ParameterToString(imageName)); // path parameter

            localVarRequestOptions.Operation = "ImageApi.ApiImageGetImageImageNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/Image/GetImage/{imageName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageGetImageImageNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ApiImageGetPreviewImageImageNameGet(string imageName, int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream> localVarResponse = ApiImageGetPreviewImageImageNameGetWithHttpInfo(imageName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream> ApiImageGetPreviewImageImageNameGetWithHttpInfo(string imageName, int operationIndex = 0)
        {
            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Photobox.Web.RestApi.Client.ApiException(400, "Missing required parameter 'imageName' when calling ImageApi->ApiImageGetPreviewImageImageNameGet");
            }

            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageName", Photobox.Web.RestApi.Client.ClientUtils.ParameterToString(imageName)); // path parameter

            localVarRequestOptions.Operation = "ImageApi.ApiImageGetPreviewImageImageNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/Image/GetPreviewImage/{imageName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageGetPreviewImageImageNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ApiImageGetPreviewImageImageNameGetAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await ApiImageGetPreviewImageImageNameGetWithHttpInfoAsync(imageName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Photobox.Web.RestApi.Client.ApiResponse<System.IO.Stream>> ApiImageGetPreviewImageImageNameGetWithHttpInfoAsync(string imageName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageName' is set
            if (imageName == null)
            {
                throw new Photobox.Web.RestApi.Client.ApiException(400, "Missing required parameter 'imageName' when calling ImageApi->ApiImageGetPreviewImageImageNameGet");
            }


            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("imageName", Photobox.Web.RestApi.Client.ClientUtils.ParameterToString(imageName)); // path parameter

            localVarRequestOptions.Operation = "ImageApi.ApiImageGetPreviewImageImageNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/Image/GetPreviewImage/{imageName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageGetPreviewImageImageNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiImageListImagesGet(int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.ApiResponse<List<string>> localVarResponse = ApiImageListImagesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Photobox.Web.RestApi.Client.ApiResponse<List<string>> ApiImageListImagesGetWithHttpInfo(int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ImageApi.ApiImageListImagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/api/Image/ListImages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageListImagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiImageListImagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Photobox.Web.RestApi.Client.ApiResponse<List<string>> localVarResponse = await ApiImageListImagesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Photobox.Web.RestApi.Client.ApiResponse<List<string>>> ApiImageListImagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ImageApi.ApiImageListImagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/api/Image/ListImages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageListImagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiImageUploadImagePost(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0)
        {
            ApiImageUploadImagePostWithHttpInfo(imageName, formFile);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Photobox.Web.RestApi.Client.ApiResponse<Object> ApiImageUploadImagePostWithHttpInfo(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0)
        {
            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (imageName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Photobox.Web.RestApi.Client.ClientUtils.ParameterToMultiMap("", "imageName", imageName));
            }
            if (formFile != null)
            {
                localVarRequestOptions.FileParameters.Add("formFile", formFile);
            }

            localVarRequestOptions.Operation = "ImageApi.ApiImageUploadImagePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Image/UploadImage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageUploadImagePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiImageUploadImagePostAsync(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiImageUploadImagePostWithHttpInfoAsync(imageName, formFile, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Photobox.Web.RestApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageName"> (optional)</param>
        /// <param name="formFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Photobox.Web.RestApi.Client.ApiResponse<Object>> ApiImageUploadImagePostWithHttpInfoAsync(string imageName = default(string), System.IO.Stream formFile = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Photobox.Web.RestApi.Client.RequestOptions localVarRequestOptions = new Photobox.Web.RestApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Photobox.Web.RestApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (imageName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Photobox.Web.RestApi.Client.ClientUtils.ParameterToMultiMap("", "imageName", imageName));
            }
            if (formFile != null)
            {
                localVarRequestOptions.FileParameters.Add("formFile", formFile);
            }

            localVarRequestOptions.Operation = "ImageApi.ApiImageUploadImagePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Image/UploadImage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiImageUploadImagePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
