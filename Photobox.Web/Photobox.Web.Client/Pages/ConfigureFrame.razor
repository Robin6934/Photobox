@page "/configureFrame"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using MudBlazor;
@using MudBlazor.Interop
@using Photobox.Web.Client.MouseService
@using Photobox.Web.Client.Pages.Components

@inject IJSRuntime JsRuntime
@inject MouseService mouseService;

<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<h3>Photo Frame Customizer</h3>

@if (string.IsNullOrEmpty(_imagePreview))
{
    <MudPaper Class="border-dashed border-2 mud-border-primary pa-4"
              Style="aspect-ratio: 3 / 2; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; gap: 16px; padding: 20px;">
    
        <MudText Typo="Typo.h6" Class="text-secondary">
            No Image Selected <br />
            Please choose a photo taken with your Photobox camera. Selecting the correct aspect ratio ensures the best display.
        </MudText>

        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept="image/*">
            <ActivatorContent>
                <MudFab Color="Color.Secondary"
                        StartIcon="@Icons.Material.Filled.Image"
                        Label="Load Picture" />
            </ActivatorContent>
        </MudFileUpload>
    </MudPaper>

}
else
{
    <MudPaper Class="border-dashed border-2 mud-border-primary" Style="position: relative; justify-content: center; align-items: center; display: inline-flex;"
              @onmousemove=@(e => mouseService.FireMove(this, e))
              @onmouseup=@(e => mouseService.FireUp(this, e))
              @onmouseleave=@(e => mouseService.FireLeave(this, e))>
        <MudImage id="myImage"
                  Fluid="true"
                  src="@_imagePreview"
                  Style="position: relative; z-index: 1; pointer-events: none"/>
        
            @foreach (var imageObject in _imageObjects)
            {
                <Draggable @bind-X=imageObject.X @bind-Y=imageObject.Y>
                    <img style="position: absolute; scale: @(imageObject.Scale); z-index: 2;"
                         draggable="true" src="@imageObject.Content" alt=""/>
                </Draggable>
            }
    </MudPaper>
    <MudButton @onclick="AddTextObject" StartIcon="@Icons.Material.Filled.NoteAdd">Add Text</MudButton>
    <MudButton @onclick="AddImageObject" StartIcon="@Icons.Material.Filled.AddPhotoAlternate">Add Image</MudButton>
    
    
}

@code {
    private string? _imagePreview;
    private readonly List<ImageObject> _imageObjects = [];
    
    // 10.5 megaByte
    long _maxFileSize = 10L * 1024L * 1024L;

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file is not null)
        {
            // TODO (11.02.2025) check for too large files and show error message 
            var buffer = new byte[file.Size];
            await file.OpenReadStream(_maxFileSize).ReadAsync(buffer.AsMemory());
            _imagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task AddTextObject()
    {
        string content = await JsRuntime.InvokeAsync<string>("renderTextAsPng", "Sample Text", 16, "Black");

        await AddObject(content);
    }

    private async Task AddImageObject()
    {
        await AddObject("https://cdn.pixabay.com/photo/2016/09/24/20/11/dab-1692452_1280.png", 0.1d);
    }

    private async Task AddObject(string content, double scale = 1.0d)
    {
        var result = await JsRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", "myImage");

        _imageObjects.Add(new ImageObject
        {
            Content = content,
            X = result.Width / 2,
            Y = result.Height / 2,
            Scale = scale,
        });
    }

    private void UpdateObject(ImageObject obj)
    {
        var index = _imageObjects.FindIndex(x => x == obj);
        if (index != -1)
        {
            _imageObjects[index] = obj;
            StateHasChanged();
        }
    }
}

<script>
    window.MyDOMGetBoundingClientRect = (elementId) => {
        const element = document.getElementById(elementId);
        return element.getBoundingClientRect(); 
    };
</script>